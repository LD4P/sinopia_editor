/**
 * QA 2.2 Linked Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Qa22LinkedDataApi) {
      root.Qa22LinkedDataApi = {};
    }
    root.Qa22LinkedDataApi.FetchTermApi = factory(root.Qa22LinkedDataApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * FetchTerm service.
   * @module api/FetchTermApi
   * @version 2.2
   */

  /**
   * Constructs a new FetchTermApi. 
   * @alias module:api/FetchTermApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get a single term from an authority.  Generally there are no additional parameters.  See the authority&#39;s configuration file to be sure.  Some authorities support &#x60;lang&#x60; which can be used to filter the language of returned strings.
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} id The ID or URI for the term being retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format of the returned result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.gETFetchByIDFromAuthorityWithHttpInfo = function(vocab, id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vocab' is set
      if (vocab === undefined || vocab === null) {
        throw new Error("Missing the required parameter 'vocab' when calling gETFetchByIDFromAuthority");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gETFetchByIDFromAuthority");
      }


      var pathParams = {
        'vocab': vocab,
        'id': id
      };
      var queryParams = {
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/show/linked_data/{vocab}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single term from an authority.  Generally there are no additional parameters.  See the authority&#39;s configuration file to be sure.  Some authorities support &#x60;lang&#x60; which can be used to filter the language of returned strings.
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} id The ID or URI for the term being retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format of the returned result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.gETFetchByIDFromAuthority = function(vocab, id, opts) {
      return this.gETFetchByIDFromAuthorityWithHttpInfo(vocab, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single term from a subauthority in an authority.  Generally there are no additional parameters.  See the authority&#39;s configuration file to be sure.  Some authorities support &#x60;lang&#x60; which can be used to filter the language of returned strings.
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} subauthority Name of the subauthority.
     * @param {String} id The ID or URI for the term being retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format of the returned result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.gETFetchByIDFromSubauthorityWithHttpInfo = function(vocab, subauthority, id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vocab' is set
      if (vocab === undefined || vocab === null) {
        throw new Error("Missing the required parameter 'vocab' when calling gETFetchByIDFromSubauthority");
      }

      // verify the required parameter 'subauthority' is set
      if (subauthority === undefined || subauthority === null) {
        throw new Error("Missing the required parameter 'subauthority' when calling gETFetchByIDFromSubauthority");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gETFetchByIDFromSubauthority");
      }


      var pathParams = {
        'vocab': vocab,
        'subauthority': subauthority,
        'id': id
      };
      var queryParams = {
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/show/linked_data/{vocab}/{subauthority}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single term from a subauthority in an authority.  Generally there are no additional parameters.  See the authority&#39;s configuration file to be sure.  Some authorities support &#x60;lang&#x60; which can be used to filter the language of returned strings.
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} subauthority Name of the subauthority.
     * @param {String} id The ID or URI for the term being retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format of the returned result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.gETFetchByIDFromSubauthority = function(vocab, subauthority, id, opts) {
      return this.gETFetchByIDFromSubauthorityWithHttpInfo(vocab, subauthority, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single term from an authority given the term&#39;s URI.  Generally there are no additional parameters.  See the authority&#39;s configuration file to be sure.  Some authorities support &#x60;lang&#x60; which can be used to filter the language of returned strings.
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} uri The URI for the term being retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format of the returned result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.gETFetchURIFromAuthorityWithHttpInfo = function(vocab, uri, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vocab' is set
      if (vocab === undefined || vocab === null) {
        throw new Error("Missing the required parameter 'vocab' when calling gETFetchURIFromAuthority");
      }

      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling gETFetchURIFromAuthority");
      }


      var pathParams = {
        'vocab': vocab
      };
      var queryParams = {
        'uri': uri,
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/fetch/linked_data/{vocab}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single term from an authority given the term&#39;s URI.  Generally there are no additional parameters.  See the authority&#39;s configuration file to be sure.  Some authorities support &#x60;lang&#x60; which can be used to filter the language of returned strings.
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} uri The URI for the term being retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format of the returned result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.gETFetchURIFromAuthority = function(vocab, uri, opts) {
      return this.gETFetchURIFromAuthorityWithHttpInfo(vocab, uri, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * CORS preflight request
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} id The ID or URI for the term being retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.oPTIONSFetchFromAuthorityWithHttpInfo = function(vocab, id) {
      var postBody = null;

      // verify the required parameter 'vocab' is set
      if (vocab === undefined || vocab === null) {
        throw new Error("Missing the required parameter 'vocab' when calling oPTIONSFetchFromAuthority");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling oPTIONSFetchFromAuthority");
      }


      var pathParams = {
        'vocab': vocab,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/show/linked_data/{vocab}/{id}', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * CORS preflight request
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} id The ID or URI for the term being retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.oPTIONSFetchFromAuthority = function(vocab, id) {
      return this.oPTIONSFetchFromAuthorityWithHttpInfo(vocab, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * CORS preflight request
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} id The ID or URI for the term being retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.oPTIONSFetchFromAuthority_0WithHttpInfo = function(vocab, id) {
      var postBody = null;

      // verify the required parameter 'vocab' is set
      if (vocab === undefined || vocab === null) {
        throw new Error("Missing the required parameter 'vocab' when calling oPTIONSFetchFromAuthority_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling oPTIONSFetchFromAuthority_0");
      }


      var pathParams = {
        'vocab': vocab,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/fetch/linked_data/{vocab}', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * CORS preflight request
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} id The ID or URI for the term being retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.oPTIONSFetchFromAuthority_0 = function(vocab, id) {
      return this.oPTIONSFetchFromAuthority_0WithHttpInfo(vocab, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * CORS preflight request
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} subauthority Name of the subauthority.
     * @param {String} id The ID or URI for the term being retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.oPTIONSFetchFromSubauthorityWithHttpInfo = function(vocab, subauthority, id) {
      var postBody = null;

      // verify the required parameter 'vocab' is set
      if (vocab === undefined || vocab === null) {
        throw new Error("Missing the required parameter 'vocab' when calling oPTIONSFetchFromSubauthority");
      }

      // verify the required parameter 'subauthority' is set
      if (subauthority === undefined || subauthority === null) {
        throw new Error("Missing the required parameter 'subauthority' when calling oPTIONSFetchFromSubauthority");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling oPTIONSFetchFromSubauthority");
      }


      var pathParams = {
        'vocab': vocab,
        'subauthority': subauthority,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/show/linked_data/{vocab}/{subauthority}/{id}', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * CORS preflight request
     * @param {String} vocab Name of the authority&#39;s configuration file.
     * @param {String} subauthority Name of the subauthority.
     * @param {String} id The ID or URI for the term being retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.oPTIONSFetchFromSubauthority = function(vocab, subauthority, id) {
      return this.oPTIONSFetchFromSubauthorityWithHttpInfo(vocab, subauthority, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
