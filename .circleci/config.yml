# Copyright 2019 Stanford University see Apache2.txt for license
# Node.js Javascript CircleCI 2.0 configuration file
#
# Check https://hub.docker.com/r/circleci/node/ for more details
#
defaults: &defaults
  docker:
    - image: circleci/node:14.11.0-browsers
  working_directory: ~/sinopia_editor

version: 2
jobs:
  # Maintains cache of 2 sets of node_modules: production and CI
  dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: dependencies-prod-{{ checksum "package.json" }}
      - run: npm install --only=production
      - save_cache:
          key: dependencies-prod-{{ checksum "package.json" }}
          paths:
            - node_modules
      - restore_cache:
          key: dependencies-ci-{{ checksum "package.json" }}
      - run: npm install # including CI/Test dependencies
      - save_cache:
          key: dependencies-ci-{{ checksum "package.json" }}
          paths:
            - node_modules
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: dependencies-ci-{{ checksum "package.json" }}
      - run: npm run eslint
      - run: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist
      - run:
          command: npm run jest-ci
          environment:
            JEST_JUNIT_OUTPUT: "test-results/jest/jest-results.xml"
  integration:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build -t ld4l/sinopia_editor --build-arg USE_FIXTURES=false --build-arg INDEX_URL=http://elasticsearch:9200 --build-arg SINOPIA_API_BASE_URL=http://api:3000 .
      - run: docker build -f Dockerfile.cypress -t ld4l/sinopia_editor_cypress .
      - run:
          name: Start docker env
          command: |
            set -x
            # Start everything but API.
            COGNITO_ADMIN_PASSWORD=$COGNITO_ADMIN_PASSWORD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY docker-compose up -d pipeline elasticsearch mongo
            docker run --name editor-cypress -it --security-opt seccomp=unconfined --network sinopia_editor_default -e COGNITO_ADMIN_PASSWORD=$COGNITO_ADMIN_PASSWORD -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -d ld4l/sinopia_editor
            sleep 5
            # This is a special mongo-setup just for cypress env.
            docker run --rm --name mongo-setup-cypress -it --security-opt seccomp=unconfined --network sinopia_editor_default -d ld4p/sinopia_dev_setup:cypress
            # Wait while mongo-setup creates the user needed by api
            sleep 5
            COGNITO_ADMIN_PASSWORD=$COGNITO_ADMIN_PASSWORD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY docker-compose up -d api
            docker run --rm --network sinopia_editor_default appropriate/curl --retry 25 --retry-delay 1 --retry-connrefused http://editor-cypress:8000/
            docker run --rm --network sinopia_editor_default appropriate/curl --retry 25 --retry-delay 1 --retry-connrefused http://api:3000/
      # The test needs to be run within Docker, as (remote) Sinopia network is not available from this testing container.
      - run:
          name: Run docker test
          command: |
            set -e
            docker run --name cypress -it --security-opt seccomp=unconfined --network sinopia_editor_default -e CYPRESS_EDITOR_URL='http://editor-cypress:8000/' -e CYPRESS_COGNITO_TEST_USER_NAME=$COGNITO_TEST_USER_NAME -e CYPRESS_COGNITO_TEST_USER_PASS=$COGNITO_TEST_USER_PASS ld4l/sinopia_editor_cypress || result=$?
            [[ $result -ne 0 ]] && {
            docker cp cypress:/cypress/videos .
            docker cp cypress:/cypress/screenshots .
            exit 1
            } || {
            exit 0
            }
      - store_artifacts:
          path: /home/circleci/sinopia_editor/videos
      - store_artifacts:
          path: /home/circleci/sinopia_editor/screenshots
  register_latest_image:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache: # gives us back matching node_modules
          key: dependencies-prod-{{ checksum "package.json" }}
      - attach_workspace:
          at: .
      - run:
          name: Build & Register Images
          command: |
            docker build -t ld4p/sinopia_editor:latest .
            docker build -t ld4p/sinopia_editor:dev --build-arg SINOPIA_API_BASE_URL=$SINOPIA_API_BASE_URL_DEV --build-arg SINOPIA_ENV=DEV --build-arg SINOPIA_URI=$SINOPIA_URI_DEV --build-arg AWS_COGNITO_DOMAIN=$AWS_COGNITO_DOMAIN_DEV --build-arg COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID_DEV --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_DEV --build-arg INDEX_URL=$INDEX_URL_DEV --build-arg SEARCH_HOST=$INDEX_URL_DEV --build-arg EXPORT_BUCKET_URL=$EXPORT_BUCKET_URL_DEV --build-arg HONEYBADGER_API_KEY=$HONEYBADGER_API_KEY --build-arg HONEYBADGER_REVISION=$CIRCLE_SHA1 .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ld4p/sinopia_editor:latest
            docker push ld4p/sinopia_editor:dev
  register_tag_image:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache: # gives us back matching node_modules
          key: dependencies-prod-{{ checksum "package.json" }}
      - attach_workspace:
          at: .
      - run:
          name: Build & Register Images
          command: |
            docker build -t ld4p/sinopia_editor:$CIRCLE_TAG-stage --build-arg SINOPIA_API_BASE_URL=$SINOPIA_API_BASE_URL_STAGE --build-arg SINOPIA_ENV=STAGE --build-arg SINOPIA_URI=$SINOPIA_URI_STAGE --build-arg AWS_COGNITO_DOMAIN=$AWS_COGNITO_DOMAIN_STAGE --build-arg COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID_STAGE --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_STAGE --build-arg INDEX_URL=$INDEX_URL_STAGE --build-arg SEARCH_HOST=$INDEX_URL_STAGE --build-arg EXPORT_BUCKET_URL=$EXPORT_BUCKET_URL_STAGE --build-arg HONEYBADGER_API_KEY=$HONEYBADGER_API_KEY --build-arg HONEYBADGER_REVISION=$CIRCLE_SHA1 .
            docker build -t ld4p/sinopia_editor:$CIRCLE_TAG-prod --build-arg TRELLIS_BASE_URL=$TRELLIS_BASE_URL_PROD --build-arg SINOPIA_URI=$SINOPIA_URI_PROD --build-arg AWS_COGNITO_DOMAIN=$AWS_COGNITO_DOMAIN_PROD --build-arg COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID_PROD --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_PROD --build-arg INDEX_URL=$INDEX_URL_PROD --build-arg SEARCH_HOST=$INDEX_URL_PROD --build-arg EXPORT_BUCKET_URL=$EXPORT_BUCKET_URL_PROD --build-arg HONEYBADGER_API_KEY=$HONEYBADGER_API_KEY --build-arg HONEYBADGER_REVISION=$CIRCLE_SHA1 .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ld4p/sinopia_editor:$CIRCLE_TAG-stage
            docker push ld4p/sinopia_editor:$CIRCLE_TAG-prod

  update_ecs:
    working_directory: ~/sinopia_editor
    docker: # NOT the default
      - image: circleci/python:3.7-stretch-node-browsers
    steps:
      - run: sudo pip install awscli
      - run:
          name: Update AWS ECS
          command: |
            mkdir ~/.aws
            echo -e "[circle]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
            unset AWS_SESSION_TOKEN
            aws configure set region us-west-2
            aws configure set output json
            temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $DEV_ROLE_ARN --profile circle | jq .Credentials)
            export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
            aws configure list # Show confirmation of config
            task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-homepage --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
            cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-dev"))')
            # echo -n "task_arn=$task_arn\ncluster_arn=$cluster_arn\n"
            aws ecs update-service --service sinopia-homepage --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment

workflows:
  version: 2
  build:
    jobs:
      - dependencies:
          filters:
            branches:
              only:
                - /.*/
            tags:
              only:
                - /v.*/
      - build:
          requires:
            - dependencies
          filters:
            branches:
              only:
                - /.*/
            tags:
              only:
                - /v.*/
      - integration:
          filters:
            branches:
              only:
                - /.*/
            tags:
              only:
                - /v.*/
      - register_latest_image:
          requires:
            - build
          filters:
            branches:
              only:
                - master
            tags:
              ignore:
                - /v.*/
      - register_tag_image:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /v.*/
      - update_ecs:
          requires:
            - register_latest_image
