version: 2.1
orbs:
  node: circleci/node@5.0.2
  docker: circleci/docker@2.5.0
  aws-cli: circleci/aws-cli@3.1.0
  gh: circleci/github-cli@2.2.0
parameters:
  node-version:
    type: string
    default: "16.10.0"
references:
  publish_params: &publish_params
    docker-password: DOCKER_PASS
    docker-username: DOCKER_USER
  filters:
    branch_only: &branch_only_filter
      branches:
        only:
          - /.*/
      tags:
        ignore:
          - /.*/
    main_only: &main_only_filter
      branches:
        only:
          - main
      tags:
        ignore:
          - /.*/
    release_and_beta_only: &release_and_beta_only_filter
      branches:
        ignore:
          - /.*/
      tags:
        only:
          - /v.[0-9\.]+(-beta)?/
    release_only: &release_only_filter
      branches:
        ignore:
          - /.*/
      tags:
        only:
          - /v.[0-9\.]+/
executors:
  default:
    docker:
      - image: 'cimg/node:<< pipeline.parameters.node-version >>'
jobs:
  integration:
    executor: default
    working_directory: ~/sinopia_editor
    steps:
      - checkout
      - setup_remote_docker
      - docker/check:
          <<: *publish_params
      - run: docker build -t ld4l/sinopia_editor --build-arg USE_FIXTURES=false --build-arg INDEX_URL=http://elasticsearch:9200 --build-arg SINOPIA_API_BASE_URL=http://api:3000 .
      - run: docker build -f Dockerfile.cypress -t ld4l/sinopia_editor_cypress .
      - run:
          name: Start docker env
          command: |
            set -x
            # Start everything but API.
            COGNITO_ADMIN_PASSWORD=$COGNITO_ADMIN_PASSWORD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY docker-compose up -d pipeline elasticsearch mongo
            docker run --name editor-cypress -it --security-opt seccomp=unconfined --network sinopia_editor_default -e COGNITO_ADMIN_PASSWORD=$COGNITO_ADMIN_PASSWORD -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -d ld4l/sinopia_editor
            sleep 5
            # This is a special mongo-setup just for cypress env.
            docker run --rm --name mongo-setup-cypress -it --security-opt seccomp=unconfined --network sinopia_editor_default -d ld4p/sinopia_dev_setup:cypress
            # Wait while mongo-setup creates the user needed by api
            sleep 5
            COGNITO_ADMIN_PASSWORD=$COGNITO_ADMIN_PASSWORD AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY docker-compose up -d api
            docker run --rm --network sinopia_editor_default appropriate/curl --retry 25 --retry-delay 1 --retry-connrefused http://editor-cypress:8000/
            docker run --rm --network sinopia_editor_default appropriate/curl --retry 25 --retry-delay 1 --retry-connrefused http://api:3000/
      # The test needs to be run within Docker, as (remote) Sinopia network is not available from this testing container.
      - run:
          name: Run docker test
          command: |
            set -e
            docker run --name cypress -it --security-opt seccomp=unconfined --network sinopia_editor_default -e CYPRESS_EDITOR_URL='http://editor-cypress:8000/' -e CYPRESS_COGNITO_TEST_USER_NAME=$COGNITO_TEST_USER_NAME -e CYPRESS_COGNITO_TEST_USER_PASS=$COGNITO_TEST_USER_PASS ld4l/sinopia_editor_cypress || result=$?
            [[ $result -ne 0 ]] && {
            docker cp cypress:/cypress/videos .
            docker cp cypress:/cypress/screenshots .
            exit 1
            } || {
            exit 0
            }
      - store_artifacts:
          path: /home/circleci/sinopia_editor/videos
      - store_artifacts:
          path: /home/circleci/sinopia_editor/screenshots
  test:
    executor: default
    environment:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - run:
          name: Run tests
          command: DEBUG_PRINT_LIMIT=200000 npm run test
          # Since the test reporter is quiet while running tests, this is necessary.
          no_output_timeout: 15m
      - run:
          name: Send coverage report to Code Climate
          command: |
            ./cc-test-reporter after-build --coverage-input-type lcov --exit-code $?
  deploy-ecs:
    parameters:
      role-arn:
        type: env_var_name
        default: DEV_ROLE_ARN
      cluster:
        type: string
        default: sinopia-dev
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Deploy to ECS
          command: |
            unset AWS_SESSION_TOKEN
            aws configure set output json
            temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn ${<< parameters.role-arn >>} --profile default | jq .Credentials)
            export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
            task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-homepage --sort DESC --max-items 1 | jq -r --exit-status '.taskDefinitionArns[]')
            cluster_arn=$(aws ecs list-clusters | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/<< parameters.cluster >>"))')
            aws ecs update-service --service sinopia-homepage --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
  dependency-update:
    executor: default
    steps:
      - gh/setup
      - gh/clone
      - run:
          name: Update dependencies
          command: |
            git config user.name "dlss-infra-bot"
            git config user.email "dlss-infrastructure-team-owner@lists.stanford.edu"
            git checkout -b update-dependencies
            repo_url=$(echo $CIRCLE_REPOSITORY_URL | sed -e "s/git@github\.com:/https:\/\/github.com\//" -e "s/\.git//")
            git remote set-url origin $repo_url
            git remote show origin
            npm update
            npm audit fix || echo "Outstanding fixes"
            git add package-lock.json package.json && git commit -m "Update NPM dependencies"
            if [ $? -eq 0 ]; then
              git push origin update-dependencies && gh pr create --title "Update dependencies" --body ""
            fi
workflows:
  build:
    jobs:
      - test:
          filters:
            <<: *branch_only_filter
      - node/run:
          name: lint
          npm-run: lint
          version: << pipeline.parameters.node-version >>
          filters:
            <<: *branch_only_filter
      - integration:
          context: ld4p
          filters:
            <<: *branch_only_filter
      - docker/publish:
          <<: *publish_params
          name: publish-latest
          context: ld4p
          image: ld4p/sinopia_editor
          tag: latest
          requires:
            - test
            - lint
            - integration
          filters:
            <<: *main_only_filter
      - docker/publish:
          <<: *publish_params
          name: publish-dev
          context: ld4p
          image: ld4p/sinopia_editor
          tag: dev
          extra_build_args: --build-arg SINOPIA_API_BASE_URL=$SINOPIA_API_BASE_URL_DEV --build-arg SINOPIA_ENV=DEV --build-arg SINOPIA_URI=$SINOPIA_URI_DEV --build-arg AWS_COGNITO_DOMAIN=$AWS_COGNITO_DOMAIN_DEV --build-arg COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID_DEV --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_DEV --build-arg INDEX_URL=$INDEX_URL_DEV --build-arg SEARCH_HOST=$INDEX_URL_DEV --build-arg EXPORT_BUCKET_URL=$EXPORT_BUCKET_URL_DEV --build-arg HONEYBADGER_API_KEY=$HONEYBADGER_API_KEY --build-arg HONEYBADGER_REVISION=$CIRCLE_SHA1
          requires:
            - test
            - lint
            - integration
          filters:
            <<: *main_only_filter
      - docker/publish:
          <<: *publish_params
          name: publish-stage
          context: ld4p
          image: ld4p/sinopia_editor
          tag: release-stage
          extra_build_args: --build-arg SINOPIA_API_BASE_URL=$SINOPIA_API_BASE_URL_STAGE --build-arg SINOPIA_ENV=STAGE --build-arg SINOPIA_URI=$SINOPIA_URI_STAGE --build-arg AWS_COGNITO_DOMAIN=$AWS_COGNITO_DOMAIN_STAGE --build-arg COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID_STAGE --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_STAGE --build-arg INDEX_URL=$INDEX_URL_STAGE --build-arg SEARCH_HOST=$INDEX_URL_STAGE --build-arg EXPORT_BUCKET_URL=$EXPORT_BUCKET_URL_STAGE --build-arg HONEYBADGER_API_KEY=$HONEYBADGER_API_KEY --build-arg HONEYBADGER_REVISION=$CIRCLE_SHA1
          filters:
            <<: *release_and_beta_only_filter
      - docker/publish:
          <<: *publish_params
          name: publish-prod
          context: ld4p
          image: ld4p/sinopia_editor
          tag: release-prod
          extra_build_args: --build-arg SINOPIA_API_BASE_URL=$SINOPIA_API_BASE_URL_PROD --build-arg SINOPIA_URI=$SINOPIA_URI_PROD --build-arg AWS_COGNITO_DOMAIN=$AWS_COGNITO_DOMAIN_PROD --build-arg COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID_PROD --build-arg COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_PROD --build-arg INDEX_URL=$INDEX_URL_PROD --build-arg SEARCH_HOST=$INDEX_URL_PROD --build-arg EXPORT_BUCKET_URL=$EXPORT_BUCKET_URL_PROD --build-arg HONEYBADGER_API_KEY=$HONEYBADGER_API_KEY --build-arg HONEYBADGER_REVISION=$CIRCLE_SHA1
          filters:
            <<: *release_only_filter
      - deploy-ecs:
          name: deploy-ecs-dev
          context: ld4p
          requires:
            - publish-dev
          filters:
            <<: *main_only_filter
      - deploy-ecs:
          name: deploy-ecs-stage
          context: ld4p
          role-arn: STAGE_ROLE_ARN
          cluster: sinopia-staging
          requires:
            - publish-stage
          filters:
            <<: *release_and_beta_only_filter
      - deploy-ecs:
          name: deploy-ecs-prod
          context: ld4p
          role-arn: PROD_ROLE_ARN
          cluster: sinopia-production
          requires:
            - publish-prod
          filters:
            <<: *release_only_filter
  dependency-update:
    triggers:
      - schedule:
          # Mondays at 1am
          cron: "0 1 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - dependency-update:
          context: ld4p
